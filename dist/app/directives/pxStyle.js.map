{"version":3,"sources":["directives/pxStyle.ts","directives/pxStyle.js"],"names":["pxStyle","pxStyle.watchPxStyle","pxStyle.clearOldStyles","pxStyle.setNewStyles"],"mappings":"AAAA,SAAA,UAAA;IACIA;IAEAA,OAAOA;QACHA,UAAUA;QACVA,MAAMA,UAACA,QAAQA,SAASA,YAAUA;;YAG9BA,OAAOA,OACHA,WAAWA,SACXA,SAAAA,aAAsBA,UAAUA,UAAQA;;;gBAGpCC,IAAIA,aAAaA,aAAaA,WAAWA;oBACrCA,eAAeA,UAAUA;;gBAG7BA,aAAaA;;;;;YAMjBD;;;YAKJA,SAAAA,eAAwBA,WAAWA,WAASA;gBACxCE,KAAKA,IAAIA,OAAOA,WAAWA;;oBAEvBA,IAAIA,UAAUA,eAAeA,QAAQA,CAACA,UAAUA,eAAeA,MAAMA;wBACjEA,QAAQA,IAAIA,KAAKA;;;;;;YAO7BF,SAAAA,aAAsBA,WAASA;gBAC3BG,KAAKA,IAAIA,OAAOA,WAAWA;oBACvBA,IAAIA,UAAUA,eAAeA,MAAMA;wBAC/BA,QAAQA,IAAIA,MAAMA,UAAUA,OAAOA;;;;;;;AA1C3C,QAAA,UAAO;ACyCvB","file":"directives/pxStyle.js","sourcesContent":["export function pxStyle() {\r\n    'ngInject';\r\n    \r\n    return {\r\n        restrict: 'A',\r\n        link: ($scope, element, attributes) => {\r\n\r\n            // Watch the px-style attribute.\r\n            $scope.$watch(\r\n                attributes.pxStyle,\r\n                function watchPxStyle(newValue, oldValue) {\r\n                    // When the hash of styles changes, we need to remove any\r\n                    // CSS properties that are no longer relevant.\r\n                    if (newValue && (newValue !== oldValue)) {\r\n                        clearOldStyles(newValue, oldValue);\r\n                    }\r\n\r\n                    setNewStyles(newValue);\r\n                },\r\n\r\n                // NOTE: You have to do a DEEP watch here, otherwise, AngularJS\r\n                // will fall into an infinite digest cycle (I assume because the\r\n                // reference to the object keeps changing as it is eval'd).\r\n                true\r\n            );\r\n            \r\n            // I clear the styles that are no longer present in the new styles\r\n            // collection.\r\n            function clearOldStyles(newStyles, oldStyles) {\r\n                for (var key in oldStyles) {\r\n                    // Make sure the property is missing in the new sytles.\r\n                    if (oldStyles.hasOwnProperty(key) && !newStyles.hasOwnProperty(key)) {\r\n                        element.css(key, \"\");\r\n                    }\r\n                }\r\n            }\r\n\r\n            // I set the new styles on the element. Each CSS property value is\r\n            // automatically appended with a \"px\" unit of measurement.\r\n            function setNewStyles(newStyles) {\r\n                for (var key in newStyles) {\r\n                    if (newStyles.hasOwnProperty(key)) {\r\n                        element.css(key, (newStyles[key] + \"px\"));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n}","function pxStyle() {\n    'ngInject';\n    return {\n        restrict: 'A',\n        link: function ($scope, element, attributes) {\n            // Watch the px-style attribute.\n            $scope.$watch(attributes.pxStyle, function watchPxStyle(newValue, oldValue) {\n                // When the hash of styles changes, we need to remove any\n                // CSS properties that are no longer relevant.\n                if (newValue && (newValue !== oldValue)) {\n                    clearOldStyles(newValue, oldValue);\n                }\n                setNewStyles(newValue);\n            }, \n            // NOTE: You have to do a DEEP watch here, otherwise, AngularJS\n            // will fall into an infinite digest cycle (I assume because the\n            // reference to the object keeps changing as it is eval'd).\n            true);\n            // I clear the styles that are no longer present in the new styles\n            // collection.\n            function clearOldStyles(newStyles, oldStyles) {\n                for (var key in oldStyles) {\n                    // Make sure the property is missing in the new sytles.\n                    if (oldStyles.hasOwnProperty(key) && !newStyles.hasOwnProperty(key)) {\n                        element.css(key, \"\");\n                    }\n                }\n            }\n            // I set the new styles on the element. Each CSS property value is\n            // automatically appended with a \"px\" unit of measurement.\n            function setNewStyles(newStyles) {\n                for (var key in newStyles) {\n                    if (newStyles.hasOwnProperty(key)) {\n                        element.css(key, (newStyles[key] + \"px\"));\n                    }\n                }\n            }\n        }\n    };\n}\nexports.pxStyle = pxStyle;\n"],"sourceRoot":"/source/"}