{"version":3,"sources":["directives/draggable.ts","directives/draggable.js"],"names":["draggable","draggable.dragstart","draggable.dragend","draggable.dragOver","draggable.drop","draggable.calculateNewPosition","draggable.reportChanges"],"mappings":"AAAA,SAAA,YAAA;IACIA;IAEAA,OAAOA;QACHA,UAAUA;QACVA,OAAOA;YACHA,WAAWA;YACXA,YAAYA;YACZA,YAAYA;;QAEhBA,MAAMA,UAACA,OAAOA,SAASA,OAAOA,aAAWA;YACrCA,IAAIA,aAAaA,QAAQA;YACzBA,IAAIA,mBAAmBA,SAASA,cAAcA,MAAMA;YAEpDA,IAAIA,CAACA,kBAAkBA;gBACnBA;;YAGJA,WAAWA,iBAAiBA,aAAaA,WAAWA;YACpDA,WAAWA,iBAAiBA,WAAWA,SAASA;YAEhDA,IAAIA;YACJA,IAAIA;YAEJA,SAAAA,UAAmBA,OAAKA;gBACpBC,KAAKA,UAAUA,IAAIA;gBAEnBA,aAAaA;gBACbA,YAAYA;gBAEZA,MAAMA,aAAaA,QAAQA,QAAQA;gBAEnCA,iBAAiBA,iBAAiBA,YAAYA,UAAUA;gBACxDA,iBAAiBA,iBAAiBA,QAAQA,MAAMA;;YAGpDD,SAAAA,QAAiBA,OAAKA;gBAClBE,iBAAiBA,oBAAoBA,YAAYA,UAAUA;gBAC3DA,iBAAiBA,oBAAoBA,QAAQA,MAAMA;gBAEnDA,KAAKA,UAAUA,OAAOA;;YAG1BF,SAAAA,SAAkBA,OAAKA;gBACnBG,IAAIA,MAAMA,iBAAiBA;oBACvBA,MAAMA;;gBAGVA,IAAIA,MAAMA,gBAAgBA;oBACtBA,MAAMA;;gBAGVA,MAAMA,aAAaA,aAAaA;gBAEhCA,IAAIA,cAAcA,qBAAqBA,WAAWA;gBAElDA,cAAcA,YAAYA,GAAGA,YAAYA;gBAEzCA,YAAYA;gBAEZA,OAAOA;;YAGXH,SAAAA,KAAcA,OAAKA;gBACfI,IAAIA,MAAMA,iBAAiBA;oBACvBA,MAAMA;;gBAGVA,IAAIA,MAAMA,gBAAgBA;oBACtBA,MAAMA;;gBAGVA,OAAOA;;YAGXJ,SAAAA,qBAA8BA,WAAWA,SAAOA;gBAC5CK,IAAIA,UAAUA,QAAQA,UAAUA,UAAUA;gBAC1CA,IAAIA,UAAUA,QAAQA,UAAUA,UAAUA;gBAE1CA,IAAIA,QAAQA,OAAOA,iBAAiBA,YAAYA;gBAEhDA,IAAIA,OAAOA,SAASA,MAAMA,iBAAiBA,SAASA;gBACpDA,IAAIA,MAAMA,SAASA,MAAMA,iBAAiBA,QAAQA;gBAElDA,IAAIA,OAAOA,OAAOA;gBAClBA,IAAIA,OAAOA,MAAMA;gBAEjBA,QAAQA,IAAIA,cAAcA,UAAUA,iBAAiBA,UAAUA,cAAcA,OAAOA,aAAaA,MAAMA,cAAcA,OAAOA,cAAcA;gBAE1IA,OAAOA,EAAEA,GAAGA,MAAMA,GAAGA;;YAGzBL,SAAAA,cAAuBA,GAAGA,GAACA;gBACvBM,MAAMA,OAAOA,YAAAA;oBACT,IAAI,QAAQ,UAAU,MAAM,aAAa;wBACrC,MAAM,aAAa;;oBAGvB,IAAI,QAAQ,UAAU,MAAM,aAAa;wBACrC,MAAM,aAAa;;;;;;;AAnG3B,QAAA,YAAS;AC+EzB","file":"directives/draggable.js","sourcesContent":["export function draggable() {\r\n    'ngInject';\r\n\r\n    return {\r\n        restrict: 'A',\r\n        scope: {\r\n            droppable: '=draggableDroppable',\r\n            draggableX: '=',\r\n            draggableY: '='\r\n        },\r\n        link: (scope, element, attrs, ngModelCtrl) => {\r\n            var rawElement = element[0];\r\n            var droppableElement = document.querySelector(scope.droppable);\r\n\r\n            if (!droppableElement) {\r\n                return;\r\n            }\r\n\r\n            rawElement.addEventListener('dragstart', dragstart, false);\r\n            rawElement.addEventListener('dragend', dragend, false);\r\n\r\n            var startEvent;\r\n            var lastEvent;\r\n\r\n            function dragstart(event) {\r\n                this.classList.add('drag');\r\n\r\n                startEvent = event;\r\n                lastEvent = event;\r\n\r\n                event.dataTransfer.setData(\"Text\", 'id');\r\n\r\n                droppableElement.addEventListener('dragover', dragOver, false);\r\n                droppableElement.addEventListener('drop', drop, false);\r\n            }\r\n\r\n            function dragend(event) {\r\n                droppableElement.removeEventListener('dragover', dragOver, false);\r\n                droppableElement.removeEventListener('drop', drop, false);\r\n\r\n                this.classList.remove('drag');\r\n            }\r\n\r\n            function dragOver(event) {\r\n                if (event.stopPropagation) {\r\n                    event.stopPropagation();\r\n                }\r\n\r\n                if (event.preventDefault) {\r\n                    event.preventDefault();\r\n                }\r\n\r\n                event.dataTransfer.dropEffect = 'move';\r\n\r\n                var newPosition = calculateNewPosition(lastEvent, event);\r\n\r\n                reportChanges(newPosition.x, newPosition.y);\r\n\r\n                lastEvent = event;\r\n\r\n                return false;\r\n            }\r\n\r\n            function drop(event) {\r\n                if (event.stopPropagation) {\r\n                    event.stopPropagation();\r\n                }\r\n\r\n                if (event.preventDefault) {\r\n                    event.preventDefault();\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n            function calculateNewPosition(fromEvent, toEvent) {\r\n                var offsetX = toEvent.clientX - fromEvent.clientX;\r\n                var offsetY = toEvent.clientY - fromEvent.clientY;\r\n\r\n                var style = window.getComputedStyle(rawElement, null);\r\n\r\n                var left = parseInt(style.getPropertyValue(\"left\"), 10);\r\n                var top = parseInt(style.getPropertyValue(\"top\"), 10);\r\n\r\n                var newX = left + offsetX;\r\n                var newY = top + offsetY;\r\n\r\n                console.log('offsetX: ' + offsetX + ' , offsetY: ' + offsetY + ' , left: ' + left + ' , top: ' + top + ' , newX: ' + newX + ' , newY: ' + newY)\r\n\r\n                return { x: newX, y: newY };\r\n            }\r\n\r\n            function reportChanges(x, y) {\r\n                scope.$apply(function () {\r\n                    if (angular.isDefined(scope.draggableX)) {\r\n                        scope.draggableX = x;\r\n                    }\r\n\r\n                    if (angular.isDefined(scope.draggableY)) {\r\n                        scope.draggableY = y;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    };\r\n}","function draggable() {\n    'ngInject';\n    return {\n        restrict: 'A',\n        scope: {\n            droppable: '=draggableDroppable',\n            draggableX: '=',\n            draggableY: '='\n        },\n        link: function (scope, element, attrs, ngModelCtrl) {\n            var rawElement = element[0];\n            var droppableElement = document.querySelector(scope.droppable);\n            if (!droppableElement) {\n                return;\n            }\n            rawElement.addEventListener('dragstart', dragstart, false);\n            rawElement.addEventListener('dragend', dragend, false);\n            var startEvent;\n            var lastEvent;\n            function dragstart(event) {\n                this.classList.add('drag');\n                startEvent = event;\n                lastEvent = event;\n                event.dataTransfer.setData(\"Text\", 'id');\n                droppableElement.addEventListener('dragover', dragOver, false);\n                droppableElement.addEventListener('drop', drop, false);\n            }\n            function dragend(event) {\n                droppableElement.removeEventListener('dragover', dragOver, false);\n                droppableElement.removeEventListener('drop', drop, false);\n                this.classList.remove('drag');\n            }\n            function dragOver(event) {\n                if (event.stopPropagation) {\n                    event.stopPropagation();\n                }\n                if (event.preventDefault) {\n                    event.preventDefault();\n                }\n                event.dataTransfer.dropEffect = 'move';\n                var newPosition = calculateNewPosition(lastEvent, event);\n                reportChanges(newPosition.x, newPosition.y);\n                lastEvent = event;\n                return false;\n            }\n            function drop(event) {\n                if (event.stopPropagation) {\n                    event.stopPropagation();\n                }\n                if (event.preventDefault) {\n                    event.preventDefault();\n                }\n                return false;\n            }\n            function calculateNewPosition(fromEvent, toEvent) {\n                var offsetX = toEvent.clientX - fromEvent.clientX;\n                var offsetY = toEvent.clientY - fromEvent.clientY;\n                var style = window.getComputedStyle(rawElement, null);\n                var left = parseInt(style.getPropertyValue(\"left\"), 10);\n                var top = parseInt(style.getPropertyValue(\"top\"), 10);\n                var newX = left + offsetX;\n                var newY = top + offsetY;\n                console.log('offsetX: ' + offsetX + ' , offsetY: ' + offsetY + ' , left: ' + left + ' , top: ' + top + ' , newX: ' + newX + ' , newY: ' + newY);\n                return { x: newX, y: newY };\n            }\n            function reportChanges(x, y) {\n                scope.$apply(function () {\n                    if (angular.isDefined(scope.draggableX)) {\n                        scope.draggableX = x;\n                    }\n                    if (angular.isDefined(scope.draggableY)) {\n                        scope.draggableY = y;\n                    }\n                });\n            }\n        }\n    };\n}\nexports.draggable = draggable;\n"],"sourceRoot":"/source/"}